用于开发2D/3D图表
一个简单的画图代码：
import matplotlib.pyplot as plt #导入matplotlib.pyplot包并命名为plt
%matplotlib inline #有些环境需要加上这行代码才可以正常工作，在pycharm中运行时需删去这行
plt.figure() #创建一个画布（开一块内存）
plt.plot([1,0,9],[4,5,6]) #第一个列表为x轴坐标，第二个是y轴的，分别对应三个点(1,4) (0,5) (9,6)，plot将这三点连成线
plt.show() #展示图像

matplotlib的三层结构：
1容器层-最底部是画板层（多数情况下不需手动创建），之上是画布层（plt.figure()），最上方是绘图区（坐标系）（plt.subplots()）-由两个坐标轴axes构成
2辅助显示层-坐标刻度、网格等使图像更方便看的工具
3图像层-可以画各种各样的图表，设置图表颜色风格等等，这两层都运行在绘图区之上
import matplotlib.pyplot as plt
plt.figure(figsize=(20,8),dpi=80)#创建画布，设置图像大小(20*8)和清晰度为80
plt.plot([1,2,3,4,5,6,7],[17,17,18,15,11,11,12])
plt.savefig("折线图1.png")#此行代码不能写在plt.show()后面
plt.show()#会释放画布的资源，因此在其之后保存图片只能保存到空图片

中文显示解决：参考https://blog.csdn.net/qq_52558996/article/details/120277381的字体文件下载地址以及https://zhuanlan.zhihu.com/p/345605782安装方法

案例：画出11点到12点这1小时内每分钟的温度变化折线图，温度范围在15-18度间
import matplotlib.pyplot as plt
import random
x=range(60)#有60分钟
y=[random.uniform(15,18) for i in x]#生成60个随机数，范围在15-18之间，for i in range(60)就是生成60次的意思
y_new=[random.uniform(1,4) for i in x]#再添加一个城市的温度变化（图像层）
plt.figure(figsize=(20,8),dpi=80)
plt.plot(x,y,color="r",linestyle="--",label="city1")
plt.plot(x,y_new,color="b",linestyle="-.",label="city2")#lable是图例
#以下用辅助显示层进行完善
x_label=[f"11点{i}分" for i in x]
plt.yticks(range(0,40,5))#设置y轴刻度，为0-40且步长为5（让刻度标注不会太密集）
plt.xticks(x[::5],x_label[::5])#设置x轴刻度，为0-60且步长为5，第二个参数是对刻度的标注值进行修改，即11点xx分的形式
#注意上句中的x[::5]参数不可省略，因为xticks要先接收一个int型列表设置刻度，刻度的标注值是可选参数，标注值和刻度要一一对应（数量相同）
plt.grid(True,linestyle="--",alpha=0.5)#增加网格显示，linestyle为网格线的种类（这里是虚线），alpha是透明度
plt.xlabel("时间")#x轴标签
plt.ylabel("温度")#y轴标签
plt.title("温度随时间变化状况")#标题
plt.legend(loc="lower left")#显示图例--必须添加，要不然不显示（默认在右上角）
plt.show()

若想将两个城市的温度画在同一画布而不同的坐标系内，就可以使用面向对象的画图方法
import matplotlib.pyplot as plt
import random
x=range(60)
y1=[random.uniform(15,18) for i in x]
y2=[random.uniform(1,4) for i in x]
figure,axes=plt.subplots(nrows=1,ncols=2,figsize=(20,8),dpi=80)#创建1行2列的绘图区，返回画布对象和绘图区对象
axes[0].plot(x,y1,color="r",linestyle="--",label="city1")#axes[0]就是第一个绘图区
axes[1].plot(x,y2,color="b",linestyle="-.",label="city2")#直接对绘图区对象进行操作
#设置刻度↓
x_label=[f"11点{i}分" for i in x]
axes[0].set_yticks(range(0,40,5))
axes[0].set_xticks(x[::5])
axes[0].set_xticklabels(x_label[::5])
axes[1].set_yticks(range(0,40,5))
axes[1].set_xticks(x[::5])
axes[1].set_xticklabels(x_label[::5])
#网格显示↓
axes[0].grid(True,linestyle="--",alpha=0.5)
axes[1].grid(True,linestyle="--",alpha=0.5)
#标签和刻度↓
axes[0].set_xlabel("时间")
axes[0].set_ylabel("温度")
axes[0].set_title("city1温度随时间变化状况")
axes[1].set_xlabel("时间")
axes[1].set_ylabel("温度")
axes[1].set_title("city2温度随时间变化状况")
#图例↓
axes[0].legend(loc="lower left")
axes[1].legend(loc="lower left")
plt.show()
总之面向对象画图时有些设置方法需要加上set或作其它改变

plt.plot除了可以画折线图，也可以画各种函数图像，原理是准备很多个点，连成曲线
import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(-1,1,1000)#在-1，1内生成1000个点
y=x**3
plt.figure(figsize=(20,8),dpi=80)
plt.plot(x,y)
plt.show()