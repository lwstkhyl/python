列表相当于c的数组，可以存储数据
list=['111','11','1111']
print(id(list))     地址：1731304894528
print(type(list))    类型：<class 'list'>
print(list)         值：['111', '11', '1111']  也可以把‘111’换成98等整数，存储不同类型的值

列表创建：使用中括号:  lst=['111',1,'22']
或调用内置函数list:  lst2=list(['11',2,'2'])
'111',1,'22'三部分有各自的地址、值和类型，它们合称为列表对象，由另一个地址进行存储，类型为list,值为'111',1,'22'
lst存储的是这个列表对象的地址

列表的特点：
1、列表元素有序排序
2、列表中元素通过索引获取         
第一种方法是正向从0开始计算  0，1，2    print(lst[0])输出111
第二种方法是逆向从-1开始    -3，-2，-1    print(lst[-3])也输出111
超出范围会报错
3、列表可以存储重复数据（同一列表可以有多个相同的元素）
4、任意类型都可存储到同一列表（一个列表可以有不同类型元素）
5、根据需要动态分配和回收内存

列表查询操作：
lst=list(['11',2,'2','11'])
print(lst.index('11')) 输出0    
列表中如果存在多个相同元素，只返回相同元素中第一个元素的索引
如果列表中没有要找的元素会报错

也可以在指定的范围内查找：
print(lst.index('1',1,3))  表示从索引为 1的位置（即上面的2）开始查找，一直找到3（不包括3，即‘11’）
print(lst.index('2',1,3))  输出2

列表切片：
切片的结果-原列表片段的拷贝，地址发生改变，是一个新的列表对象
lst=list(['11',2,'2','11'])
print(lst[1:3])  输出[2, '2']  表示从列表索引为1的到为3的（但不包括3），默认步长为1
lst=list([1,2,3,4,5,6,7,8])
print(lst[1:6:2])  输出[2, 4, 6] 步长为2，从索引为1的开始，每隔一个元素输出，一直的索引为6停止（但不包括6）
lst=list([1,2,3,4,5,6,7,8])
print(lst[:6:2])   输出[1, 3, 5] 默认从第一个元素开始
lst=list([1,2,3,4,5,6,7,8])
print(lst[1::2])  输出[2, 4, 6, 8] 默认到最后结束

print(lst[::-1])   ->[8, 7, 6, 5, 4, 3, 2, 1] 将列表倒序输出
print(lst[7::-1])  输出同上 从索引为7的向左（负数方向）输出
print(lst[6::-2])   输出[7, 5, 3, 1] 

lst=list([1,2,3,4,5,6,7,8])
print(1 in lst)    True
print(9 in lst)        False
print(10 not in lst)    True

列表的遍历：
for iten in lst:
    print(iten)

列表元素的增加：
lst=list([1,2,3,4,5,6,7,8])
1、向列表末尾添加一个元素:lst.append(100)   不改变列表地址、
2、向列表末尾添加多个元素
lst2=list([9,10,11])
lst.append(lst2)  输出[1, 2, 3, 4, 5, 6, 7, 8, [9, 10, 11]]
lst.extend(lst2)  输出[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
3、任意位置上添加
lst.insert(1,90)  输出[1, 90, 2, 3, 4, 5, 6, 7, 8]在索引为1的位置上添加元素
4、替换切片
lst[1:]=lst2   输出[1, 9, 10, 11]

列表元素的删除：
1、根据列表元素值移除
lst=list([1,2,3,4,5,6,7,3,8])
lst.remove(3)  输出[1, 2, 4, 5, 6, 7, 3, 8]
从列表中移除1个元素，如果有重复元素只删除第一个元素
元素不存在程序报错ValueError
2、根据索引移除
lst.pop(1)  输出[1, 3, 4, 5, 6, 7, 3, 8]
移除索引为1的元素
索引不存在报错IndexError
lst.pop() 会移除列表中最后1个元素
3、切片删除
lst2=lst[1:3]  lst2输出[2, 3] 索引为[2,3)的元素进入新列表
lst[1:3]=[]  lst输出[1, 4, 5, 6, 7, 3, 8]  索引为[2,3)的元素被删除
4、清除/删除列表
lst.clear()  输出[]  将列表中的所有元素删除
del lst  再print(lst) 会报错      将列表直接删除

列表元素的修改：
1、替换修改
lst=list([1,2,3,4,5,6,7,3,8])
lst[2]=100   输出[1, 2, 100, 4, 5, 6, 7, 3, 8]
2、切片赋新值
lst[1:3]=[100,200]  输出[1, 100, 200, 4, 5, 6, 7, 3, 8] 索引为[1,3)的元素被替换

列表的排序：lst=list([5,2,1,4,3,9,0,5])
1、
lst.sort()  输出[0, 1, 2, 3, 4, 5, 5, 9]  默认从小到大排，是再原列表基础上排的，没有改变地址
lst.sort(reverse=True)  输出[9, 5, 5, 4, 3, 2, 1, 0]
lst.sort(reverse=False)  输出[0, 1, 2, 3, 4, 5, 5, 9]
2、
lst2=sorted(lst)  输出lst2 为[0, 1, 2, 3, 4, 5, 5, 9]  原列表不发生任何改变
lst2=sorted(lst,reverse=True)  输出为[9, 5, 5, 4, 3, 2, 1, 0]
lst2=sorted(lst,reverse=False)  输出为[0, 1, 2, 3, 4, 5, 5, 9]

列表生成式
lst=[i for i in range(1,10)]  输出[1, 2, 3, 4, 5, 6, 7, 8, 9]
lst=[i*i for i in range(1,10)]  输出[1, 4, 9, 16, 25, 36, 49, 64, 81]
for in range 操作同以前

