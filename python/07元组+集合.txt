元组是内置数据结构之一，是不可变序列，和字符串一样，没有增删改操作
s='111'
s=s+'222'后s地址发生改变

创建方式：
1、a=('100','200','300') 用小括号创建元组
也可以直接a='100','200','300'  省略（）
如果元组中只有一个元素，用该方法必须加上逗号    a=('111',)  否则a为str(就算有括号)
print(a,type(a))  输出('100', '200', '300') <class 'tuple'>
2、b=tuple(('100','200','300'))  注意有两对括号
3、空元组a=()或a=tuple()
空列表a=[]或a=list()
空字典a={}或a=dict()

因为元组是不可变序列，在多任务环境下（即多人同时操作时）不需要加锁，使在第一个人操作时元组可读但不可改

a=(10,[20,30],40)
a[1]=1  不行，a[1]存放列表地址（列表的引用），不能更改
a[1].append(100)  可以，向列表中添加元素，输出(10, [20, 30, 100], 40)
如果元组中对象本身不可变，则不能再引用其他对象（如不能改变常量10，40）
如果元组中对象本身可变，则可变对象的引用不能改变（如列表的地址），但数据可以改变（可以对元组中的列表进行增删改）

元组的遍历：
1、使用索引  a[0]等
2、a=(10,20,30,40)
for item in a:
    print(item) 输出10 20 30 40


集合是内置数据结构，与列表、字典相同，都属于可变类型的序列，集合是没有value的字典

创建：
1、a={'100','200','300'}  使用花括号
和字典一样，不能有重复的元素，程序会自动除去重复的元素
2、a=set(range(6))  
print(a,type(a))  输出{0, 1, 2, 3, 4, 5} <class 'set'>
a=set([1,2,3,4,5,6,6])  输出{1, 2, 3, 4, 5, 6}
a=set((1,2,4,4,5,65))  输出{65, 1, 2, 4, 5}  因为集合和字典一样，元素是无序的
a=set({12,4,34,55,66,44,4})  输出{34, 66, 4, 55, 12, 44}
a=set('python')  输出{'o', 'y', 'n', 't', 'p', 'h'}  要是有重复的字母，也会自动去除
空集合：a=set() 不能用a={}，这样创建的是空字典

操作：
1、判断：a={'100','200','300'}
print(10 in a)  False  in和not in这种方法同字典等
2、新增：
a={'100','200','300'}
a.add(400)  输出{'100', '300', 400, '200'}
a.update({500,400,600})  输出{400, '300', '100', '200', 500, 600}
a.update([500,400,600])  输出{'300', 400, '200', 500, 600, '100'}
a.update((500,400,600))  输出{'200', 400, 500, 600, '100', '300'}
add--一次只添加一个元素
update--一次至少添加一个元素
3、删除：
a.remove('100')  输出{'300', '200'}  如果不存在报错keyerror
a.discard('100')  输出a.discard('100')  不存在也不报错
a.pop()  随机删除一个元素，不能指定参数（实际上是删除第一个，但集合无序，第一个元素不确定）
a.clear  输出set()  清空集合元素

集合间关系：
1、相等不相等：
a={'100','200','300'}b={'100','200','300'} 
print(a==b)  输出True
a={'100','200','300'}b={'100','200','300','400'}
print(a!=b)  输出True
2、子集：同数学定义
a={'100','200','300'}b={'100','200','300','400'}
print(a.issubset(b)) a是b的子集么？ 输出True
print(a.issubset(a))  输出True
3、超集：若a是b的子集，则b是a的超集
print(a.issuperset(a))  输出True
print(b.issuperset(a))  输出True
4、交集：同数学定义
print(b.isdisjoint(a))  b和a没有交集么？  输出False
c={'1'} print(b.isdisjoint(c))  输出True

集合的数据操作：
差集：a-a交b的部分
对称差集：a+b-a交b的部分
a={'100','200','300','500'}
b={'100','200','300','400'}
交集：print(a.intersection(b))或print(a & b) 取a,b交集，输出{'200', '100', '300'}
并集：print(a.union(b))或print(a | b) 取a,b并集，输出{'100', '300', '200', '400', '500'}
取交集并集后，原集合都不发生变化
差集：print(a.difference(b))或print(a-b)  输出a-a交b的部分，即{'500'}
对称差集：print(a.symmetric_difference(b))或print(a^b)  输出{'400', '500'}

集合生成式：
列表：a=[i for i in range(6)]  输出[0, 1, 2, 3, 4, 5]
      a=[i*i for i in range(6)]  输出[0, 1, 4, 9, 16, 25]
将上面的[]改为{}，就得到集合，这样生成的集合也是无序的









