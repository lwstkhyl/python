基础地图：
from pyecharts.charts import Map
from pyecharts.options import TitleOpts,LabelOpts,LegendOpts,ToolboxOpts, VisualMapOpts
map=Map()
data=[  //数据为一个元素是元组的列表，第一个值为省份名，第二个值为想显示的数值
    ("北京",99),
    ("上海",199),
    ("湖南",299),
    ("台湾",399),
    ("广东",499)
]
map.add("测试地图",data,"china")
#设置全局选项
map.set_global_opts(
    visualmap_opts=VisualMapOpts(#这个选项是标注对应省的颜色
        is_show=True,
        is_piecewise=True,  #设置成手动设置对应颜色
        pieces=[
            {"min":1,"max":9,"label":"1-9","color":"#CCFFFF"},
            {"min":10,"max":99,"label":"10-99","color":"#FF6666"},
            {"min":100,"max":500,"label":"100-500","color":"#990033"}
        ]#设置每段数值对应的颜色
    )
)
map.render()


全国地图-标注各省的确诊人数
给定文档的json数据结构：整个json是一个字典，该字典中包含一个名为areatree的列表，列表中共有1个元素，是一个字典，该字典中有一个名为children的列表，包含30多个元素，均为字典，显示各省的确诊信息，具体内容为：“name”:"省份名"，一个名为total的字典。该字典中有一个“confirm”的元素对应一个数值，即位确诊人数

import json
from pyecharts.charts import Map
from pyecharts.options import TitleOpts,LabelOpts,LegendOpts,ToolboxOpts, VisualMapOpts
f=open("D:/python/data/疫情.txt","r",encoding="UTF-8")
data=f.read()
f.close()
data_dict=json.loads(data)
province_data_list=data_dict["areaTree"][0]["children"]
data_list=[]#绘图所需的data
for province_data in province_data_list:
    province_name=province_data["name"]
    province_name+="省"  #规定要”xx省“这种数据才能被读取
    province_confirm=province_data["total"]["confirm"]
    data_list.append((province_name,province_confirm))
map=Map()
map.add("各省份确诊人数",data_list,"china")
map.set_global_opts(
    title_opts=TitleOpts(title="全国疫情地图"),
    visualmap_opts=VisualMapOpts(
        is_show=True,
        is_piecewise=True,
        pieces=[
            {"min":1,"max":99,"label":"1-99人","color":"#CCFFFF"},
            {"min":100,"max":999,"label":"100-999人","color":"#FFFF99"},
            {"min":1000,"max":4999,"label":"1000-4999人","color":"#FF9966"},
            {"min":5000,"max":9999,"label":"5000-9999人","color":"#FF6666"},
            {"min":10000,"max":99999,"label":"10000-99999人","color":"#CC3333"},
            {"min":100000,"label":"100000+","color":"#990033"}  #不写max就是从min到无限
        ]
    )
)
map.render("全国疫情地图.html")  #可以设置创建出来的文件名


省级地图构建
给定数据接上文，children列表的第4个元素是河南省的数据（是一个字典），其中有一个名称也为children的列表，包含很多个字典元素（是各个城市的确诊情况），每个字典都包含一个名为name的字符串（城市名）和一个名为total的字典，其中包含一个名为confirm的数值（即位确诊人数） 

import json
from pyecharts.charts import Map
from pyecharts.options import TitleOpts,LabelOpts,LegendOpts,ToolboxOpts, VisualMapOpts
f=open("D:/python/data/疫情.txt","r",encoding="UTF-8")
data=f.read()
f.close()
data_dict=json.loads(data)
cities_data=data_dict["areaTree"][0]["children"][3]["children"]
data_list=[]
for city_data in cities_data:
    city_name=city_data["name"]+"市"
    city_confirm=city_data["total"]["confirm"]
    data_list.append((city_name,city_confirm))
#还可以手动添加数据
data_list.append(("济源市",5))
map=Map()
map.add("河南省疫情分布",data_list,"河南")
map.set_global_opts(
    title_opts=TitleOpts(title="河南省疫情地图"),
    visualmap_opts=VisualMapOpts(
        is_show=True,
        is_piecewise=True,
        pieces=[
            {"min":1,"max":99,"label":"1-99人","color":"#CCFFFF"},
            {"min":100,"max":999,"label":"100-999人","color":"#FFFF99"},
            {"min":1000,"max":4999,"label":"1000-4999人","color":"#FF9966"},
            {"min":5000,"max":9999,"label":"5000-9999人","color":"#FF6666"},
            {"min":10000,"max":99999,"label":"10000-99999人","color":"#CC3333"},
            {"min":100000,"label":"100000+","color":"#990033"}  #不写max就是从min到无限
        ]
    )
)
map.render("河南省疫情地图.html")
