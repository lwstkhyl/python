正则表达式：是使用单个字符串来描述、匹配某个句法规则的字符串，常被用来检索、替换那些符合某个模式（规则）的文本
即正则表达式就是使用字符串定义规则，并通过规则去验证字符串是否匹配
python中正则表达式使用re模块，基于其中的三个基础方法来做匹配
1、re.match(匹配规则,被匹配字符串)：从被匹配字符串开头进行匹配，匹配成功返回匹配对象（包含匹配的信息，不成功则返回None)
import re
s="abc abcd abcde"
result=re.match("abc",s)
print(result)  输出<_sre.SRE_Match object; span=(0, 3), match='abc'>
print(result.span())  输出(0, 3)，即从索引为0到索引为2=3-1的字符与给定字符串匹配
print(result.group())  输出abc，即想要匹配的字符串
result=re.match("abcd",s)
print(result)  输出None，因为规则是abcd且match从头开始匹配，即使s中含有abcd，但它的第一个词组不符合规则（不是abc），所以也不行

2、re.search:搜索整个字符串，从前向后，直到找到了一个，之后停止，整个字符串都找不到就返回None
s="abc abcd abcde abcd"
result=re.search("abcd",s)
print(result.span())  输出(4, 8)

3、re.findall:搜索整个字符串，且匹配时不以空格为分界线，找出所有的匹配项，返回一个列表，若有n个匹配，列表中就有n个给定字符串
s="abc abcd abcde abcd"
result=re.findall("abc",s)
print(result)  输出['abc', 'abc', 'abc', 'abc']


元字符匹配：
字符---功能
.          匹配任意1个字符（除了\n）
\.        .本身
[]        []中列举的字符
\d        数字0-9
\D        非数字
\s        空格/tab
\S     非空格
\w        单词字符，即a-z,A-Z,0-9等
\W        非单词字符，包括空格标点等
s="1abc abcd abcde 2abcd"
result=re.findall(r'\d',s)  #'\d'前的r表示后面的'\d'不是转义字符而是元字符匹配的内容，
print(result)  输出['1', '2']，即找出所有的数字
result=re.findall(r'\W',s)#找出特殊字符
result=re.findall(r'[a-zA-Z]',s)#找出所有字母
result=re.findall(r'[5-7]',s)#找出5、6、7三个数字
也可以用rule='\W'   result=re.findall(rule,s)来代替

数量匹配：
字符---功能
*      限制给定规则的字符出现0至无数次
+          1至无数次
?          0次或1次
{m}    m次
{m,}   最少m次
{m,n}   m到n次，注意逗号前后没有空格

边界匹配：
^          匹配字符串开头
$          字符串结尾
\b        一个单词的边界
\B        非单词边界

分组匹配：
|          匹配左右任意一个表达式
()        将括号中字符作为一个分组

匹配账号，只由字母和数字组成，长度限制6-10位：
rule='^[0-9a-zA-Z]{6,10}$'   #^$连用表示从头匹配到尾

匹配QQ号，纯数字，长度5-11，且第一位不为0：
rule='^[1-9][0-9]{4，10}$'    #[1-9]后面没有{}说明这个要求只负责1位，{4，10}是因为[1-9]占用的1位，且只对前面最近的一个限制[0-9]起作用。如果不加^$，01234567这种也可以算匹配上

匹配邮箱地址，只允许qq、163、gmail这三种后缀名，形式为{内容（字母数字下划线）}[.{内容}....{内容}]@{内容(qq/163/gmail)}.{内容（字母数字下划线）}[....{内容}](中括号表示可选)，如abc.ab.cd@qq.ab或abc@163.ab.cd：
把abc单列出来，这部分要出现1至无数次，即[\w-]+；
.ab.cd中把一个.ab看作成1组，该组字符出现0至无数次，即(\.[\w-]+)*，因为表示真实的.需要用\.，再加上字母数字下划线；
@就是@;
qq就是(qq|163|gmail)
.ab就是(\.[\w-]+)+    就是把前面的.ab.cd表示中的*改成+
最后在前后加上^$，即rule='^[\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$'

s='1111111.11@qq.com'
print(re.findall(rule,s))  输出[('.11', 'qq', '.com')]
现在为了让输出为整个s，要在正则表达式最外面加一个括号，使其内容为一个大组，因为输出的结果是正则表达式中的组（小括号中的内容）
rule='(^[\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$)'
print(re.findall(rule,s))  输出[('1111111.11@qq.com', '.11', 'qq', '.com')]
如果想让只输出整体，就用match方法
print(re.match(rule,s))  输出<_sre.SRE_Match object; span=(0, 17), match='1111111.11@qq.com'>

