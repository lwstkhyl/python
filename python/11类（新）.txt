成员方法：self必须出现在传参列表中，但在实际调用时可以忽略
class student:
    name=None
    def say(self):
        print(f"hi,I'm {self.name}")#在成员方法内使用类中的变量。必须加上self.
    def say_msg(self,msg):
        print(f"hi,I'm {self.name},{msg}")
stu=student()#构建一个对象
stu.name="abc"
stu.say()  输出hi,I'm abc
stu.say_msg("111")  输出hi,I'm abc,111

面向对象编程：设计类，基于类创建对象，由对象做具体的工作
class clock:
    id=None
    price= None
    def ring(self):
        import winsound
        winsound.Beep(2000,3000)#第一个参数是频率，第二个参数是响铃的持续时间(单位：ms)
clock1=clock()
clock1.id="01"
clock1.price=100
print(f"id:{clock1.id},价格:{clock1.price}")  输出id:01,价格:100
clock1.ring()

构造方法：__init__()
在创建类对象的时候，会自动执行，将调用时传入的参数传递给该方法使用
class student:
    name=None
    age=None
    tel=None
    def __init__(self,name,age,tel):
        self.name=name
        self.age=age
        self.tel=tel
        print("创建了一个student类")
stu=student("abc",18,1111111111)
print(stu.name,stu.age,stu.tel)
输出  创建了一个student类  abc 18 1111111111

录入学生信息：总共录入10个，输入信息后需要进行输出
class student:
    name=None
    age=None
    tel=None
    def __init__(self,name,age,tel):
        self.name=name
        self.age=age
        self.tel=tel
count=1
student_information=[]
while count<=10:
    print(f"当前录入第{count}位学生信息，总共需录入10位学生信息")
    name=input("请输入学生姓名：")
    age=input("请输入学生年龄：")
    tel=input("请输入学生地址：")
    stu=student(name,age,tel)
    student_information.append(stu)
    print(f"学生{count}信息录入完成，信息为【学生姓名：{student_information[count-1].name}，年龄：{student_information[count-1].age}，地址：{student_information[count-1].tel}】")
    count+=1


python中有很多内置的类方法，有着不同的功能，称为魔术方法，相当于函数/运算符重载
字符串方法：__str__ 控制类转换成字符串的行为
class student:
    name=None
    age=None
    def __init__(self,name,age):
        self.name=name
        self.age=age
stu=student("abc",11)
print(stu)
print(str(stu))  两个输出都是stu对象的内存地址
在类定义中加上
    def __str__(self):  
        return f"name:{self.name},age:{self.age}"
再进行输出，就会都输出name:abc,age:11  

小于/大于符号比较：__lt__ 两个类不能用<进行比较，但通过该方法可以实现
    def __lt__(self, other):
        #设置通过age进行比较
        return self.age<other.age
stu1=student("abc",11)
stu2=student("bcd",12)
print(stu1<stu2)  输出true
print(stu1>stu2)  输出false  如果不写这个方法会报错

<=或>=： __le__
    def __le__(self, other):
        return self.age<=other.age
stu1=student("abc",11)
stu2=student("bcd",11)
print(stu1<=stu2)  输出true  如果不写这个方法会报错

==: __eq__
    def __eq__(self, other):
        return self.age==other.age
stu1=student("abc",11)
stu2=student("bcd",12)
print(stu1==stu2)  输出false  如果不写的话是比较两个对象的内存地址，一定会报错


面向对象编程的简单理解：基于模板（类）去创建实体（对象），使用对象完成功能开发，主要包含三大特性，封装、继承、多态
封装：将现实世界事物在类中描述为属性和方法
私有成员变量/方法：以__开头即可完成私有成员的设置。私有方法无法直接被类对象使用（在主函数中调用），私有变量无法在主函数中赋值和获取
class phone:
    __current=None
    def __single(self):
        print("single")
p1=phone()
p1.__current和p1.__single()都会报错
私有成员/方法无法被类对象使用，但可以被其他的成员使用
class phone:
    __current=1
    def __single(self):
        print("single")
    def pd_current(self):
        if self.__current>=1:
            print("true")
        else:
            self.__single()
p1=phone()
p1.pd_current()  输出true
若把__current改成0，就输出single

设计带有私有成员的手机，内部包含:
私有成员变量:_is_5g_enable，类型bool，True表示开启5g，False表示关闭5g
私有成员方法:_check_5g()，会判断私有成员 is_5g_enable的值
	若为True，打印输出:5g开启
	若为False，打印输出:5g关闭，使用4g网络
公开成员方法:call_by_5g()，调用它会执行
	调用私有成员方法:_check_5g()，判断5g网络状态
	打印输出:正在通话中
运行结果:5g关闭，使用4g网络	正在通话中
class phone:
    __is_5g_enable=False
    def __check_5g(self):
        if self.__is_5g_enable:
            print("5g开启")
        else:
            print("5g关闭，使用4g网络")
    def call_by_5g(self):
        self.__check_5g()
        print("正在通话中")
phone1=phone()
phone1.call_by_5g()


继承：
单继承---class 类名(父类名):
class phone:
    imei=None
    producer="abc"
    def call_by_4g(self):
        print("4g通话")
class new_phone(phone):
    face_id="10001"
    def call_by_5g(self):
        print("5g通话")
n_phone=new_phone()
print(n_phone.producer,n_phone.face_id)
n_phone.call_by_5g()
n_phone.call_by_4g()  这些功能都可以使用

多继承---class 类名(父类1,父类2,...):
class newest_phone(new_phone,phone):
    def call_by_6g(self):
        print("6g通话")
n_phone=newest_phone()
n_phone.call_by_4g()
n_phone.call_by_5g()
n_phone.call_by_6g()  
如果某个函数或类只想声明而不想内部进行定义，可以用pass代替结构体，如
class newest_phone(new_phone,phone):
    pass

多个父类中，如果有同名的成员，则默认以继承顺序（从左到右）为优先级，即先继承的保留，后继承的被覆盖
class phone:
    def call(self):
        print("4g通话")
class new_phone():
    def call(self):
        print("5g通话")
class newest_phone(new_phone,phone):  新类的同名函数同最左面的父类
    pass
n_phone=newest_phone()
n_phone.call()  输出5g通话  

复写：子类在继承父类的成员属性和方法后，可以对其进行修改，只要在子类中重新定义同名的属性/方法即可
class newest_phone(new_phone,phone):
    def call(self):
        print("6g通话")
n_phone=newest_phone()
n_phone.call()  输出6g通话

调用父类的同名成员：如果想使用被复写的父类的成员，有两种方法，
1、父类名.成员变量/成员方法(self)  如phone.producer和phone.call(self)
class phone:
    producer="a"
    def call(self):
        print("4g通话")
class new_phone():
    producer="b"
    def call(self):
        print("5g通话")
class newest_phone(new_phone,phone):
    producer="c"
    def call(self):
        print("6g通话")
    def get_producer(self):
        print(phone.producer)  输出a  如果写成print(self.producer) 输出c
    def get_call(self):
        phone.call(self)  输出4g通话  如果写成self.call()输出6g通话
n_phone=newest_phone()
n_phone.get_producer()    
n_phone.get_call()    

2、super().成员变量/成员方法()，如super().producer和super().call()
注意：该方法的super()默认为优先级最高的父类
    def get_producer(self):
        print(super().producer)   输出b
    def get_call(self):
        super().call()   输出5g通话 


类型注解：在代码中涉及数据交互的地方，提供数据类型的注解（显式说明），支持对变量和函数（方法）形参列表及返回值的类型注解。若直接写a=10，执行过程中需要进行判断10为int，但添加类型注解后，相当于显式地声明a为int型变量且值为10，提高代码可读性
为变量设置类型注解--
1、变量:类型
var_1:int=10
var_2:str="abc"
var_3:bool=True

class student:
    pass
stu:student=student()

my_list:list=[1,2,3]
my_tuple:tuple=(1,"abc",True)
my_dict:dict={"abc":111}

类型详细注解：如list[int]标注容器内元素的类型
my_list:list[int]=[1,2,3]
my_tuple:tuple[int,str,bool]=(1,"abc",True)
my_dict:dict[str,int]={"abc":111}
元组类型设置类型详细注解，需要将每一个元素都标记出来；字典类型设置类型详细注解，需要两个类型，第一个是key第二个是value

2、#type:类型
import random
import json
var_1=random.randint(1,10) #type:int
var_2=json.loads('{"name":"abc"}') #type:dict[str,str]
def func():
    return 10
var_3=func() #type:int

一般可以直接看出变量类型时不添加类型注解，当无法直接看出类型时（如json.loads()、random.randint()这种）才会添加
注意类型注解主要用于帮助ide对代码进行类型推断、协助做代码提示，以及帮助作者自己备注变量类型，但不会真正决定变量的类型，ide仍会根据注解中的实际值给变量赋值，而不是根据作者写的类型
var1:int="abc"
var2:str=111
print(var1,var2)  输出abc 111

函数的类型注解--
1、对形参的类型注解：如果不加该注解，在编写函数时使用形参data，函数体中使用data.时无任何提示，同时调用该函数传入参数时也没有参数类型的提示
def 函数方法名(形参名:类型,形参名:类型,...):
如def add(data1:list,data2:list):
2、对返回值的类型注解：def 函数方法名(形参)->返回值类型:
如def func(a:int)->int:
注意这两种注解也是非强制性的，编程过程中仍可以不按注解来传参和返回值，但会有警告

union：联合类型注解
对于my_list=[1,"abc"] my_dict={"name":"abc","age":11}这种混合的类，可以使用联合类型注解-union[类型,类型,...]
from typing import Union
my_list:list[Union[str,int]]=[1,"abc"]
my_dict:dict[str,Union[str,int]]={"name":"abc","age":11}
def func(data:Union[str,int])->Union[str,int]:


多态：即多种状态。即完成某个行为时，使用不同的对象会得到不同的状态；比如同一个函数，当传入的参数（类型）不同时会返回不同的值
多态常作用在继承关系上，比如函数形参声明接收父类对象，实际传入父类的子类对象进行工作，达到同一行为不同状态的结果
class animal:
    def speak(self):
        pass
class dog(animal):
    def speak(self):
        print("wolf")
class cat(animal):
    def speak(self):
        print("meow")
def do_speak(ani:animal):
    ani.speak()
d=dog()
c=cat()
do_speak(d)  输出wolf
do_speak(c)  输出meow

抽象类：如前面的父类animal中的speak方法是空实现（pass），这样设计的含义是：由父类确定有哪些方法，而具体的实现由子类自行决定。这种写法就叫做抽象类（接口），方法体是空实现的称为抽象方法
class ac:
    def cool_wind(self):
        pass
    def hot_wind(self):
        pass
    def swing_wind(self):
        pass
class m_ac(ac):
    def cool_wind(self):
        print("m制冷")
    def hot_wind(self):
        print("m制热")
    def swing_wind(self):
        print("m_swing_wind")
class g_ac(ac):
    def cool_wind(self):
        print("g制冷")
    def hot_wind(self):
        print("g制热")
    def swing_wind(self):
        print("g_swing_wind")
def make_cool(a:ac):
    a.cool_wind()
m=m_ac()
g=g_ac()
make_cool(m)  输出m制冷
make_cool(g)  输出g制冷
